#include <iostream>
#include <vector>
#include <cassert>

using namespace std;

// Благодаря & мы можем менять аргументы
// и изменения будут видны снаружи.
void my_swap(int& x, int& y) {
    int z = x;
    x = y;
    y = z;
}

// & означает, что мы не копируем массив,
// а работаем с тем массивом, который передали в аргументы.
// Тут это экономит время.
int binsearch(int x, vector<int>& a) {
    int l = 0;
    int r = a.size()-1;

    while (l < r) {
        int m = (l + r) / 2;
        // assert проверяет условие и завершает программу с ошибкой
        // если оно не выполняется.
        // Он нужен чтобы проще находить ошибки.
        // Тут мы проверяем, что мы не выходим за пределы массива.
        // Выход за границы массива - UB,
        // то есть ошибка, которую может быть очень трудно обнаружить.
        assert(0 <= m && m < a.size());
        if (a[m] == x) {
            return m;
        }
        else if (a[m] > x) {
            // Тут мы проверяем, что границы действительно изменились.
            assert(r != m - 1);
            r = m - 1;
        }
        else {
            // Тут мы проверяем, что границы действительно изменились.
            assert(l != m + 1);
            l = m + 1;
        }
    }

    if (l == r && a[r] == x) {
        return r;
    }
    else {
        return -1;
    }
}

int main() {
    // Полезно всегда инициализировать переменные нулем
    // чтобы избегать UB.
    int n = 0;
    cin >> n;

    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }

    cout << binsearch(0, a);
}
